Blank Solution
Class Library(.NET Standart) -> Bll, Dal, Entities (projelere týkla bu 2.0'ý böyle yap "netstandard2.1" EntityFramework için önemli)
Asp.Net Core Web Application -> CoreUI

BLL ->Data Access -> Manager
DAL ->Repository
ENTITIES ->Model
UI->Presentation

Gerekli kütüphaneler indirilmeli 

Entities -> Models,Enums
  
DAL  ("Dependency Injection" Baselerin constructorý sayesinde) (Entities katmanýndan referans almalý)

**Repositorylerde her class için interface class açmanýn nedeni var.Her bir class için interface repository açmamýz lazým çünkü "Dependency Injection" tetiklenmeli. Eðer yapmazsak Startup.cs içine yazdýðýmýz;
		//services.AddTransient<IProductRepository,ProductRepository>();  kullanamayýz. yani demektir ki her interface için ayrý nesne ver instance al demektir.

	Context -> MyContext: Eðer kurmak istediðimiz veri tabaný yapýsýnda Identity kullanacaksak DbContext'ten miras almamalýyýz. Çünkü Identity kendi tablolarý tamamen hazýr bir yapý sunar ve bu hazýr yapýyý DbContext saðlayamaz. Miras alacaðýmýz sýnýf "IdentityDbContext" olmalý
	Repositories
		Abstract:
		Her bir class için interface repository açmamýz lazým çünkü "Dependency Injection" tetiklenmeli. Classlar IRepositoryden miras aldýðý için implement edilmek zorunda deðil
				IRepository 
					public interface IRepository<T> where T:BaseEntity (metodlarýmýzý yazýyoruz)
				IProductRepository
					public interface IProductRepository:IRepository<Product> 
		Concretes:
		Her class için class tipinde repository açýlmalý. BaseRepositoryde olmalý ki kod tekrarý olmasýn. Daha sonra abstract interface classlarý 
				BaseRepository (implement interface)(Constructor açýlmalý: MyContext _db; prmtr MyContext db)
					public class BaseRepository<T> : IRepository<T> where T : BaseEntity
						BaseRepositoryi abstract yapmamýza gerek yok. Çünkü Manager katmanýnda instance almamýz lazým. Bu contstructor sayesinde Dependency Injection yaparýz.
				ProductRepository (class isminin altýna kýrmýzý çizgi gelir constructorda halledilmeli(MyContext db):base(db))
					public class ProductRepository:BaseRepository<Product>,IProductRepository

UI	
	(BLLden reference almalý ancak Bll de ENTITIES ve DALdan referans aldýðý için oradaki classlar burada gözükür)

	**Ancak gidipte MyContexti Startup.cs içine yazmak doðru olmaz
	**Böylece Bll içindeki kütüphaneler de bu katmanda görünür

BLL ("Dependency Injection" Baselerin constructorý sayesinde) (DAL ve ENTITIESden referance almalý) 
	ManagerServices klasörü aç
		Abstract: (her class için)
			IManager
				public interface IManager<T> where T:BaseEntity 
					Bu sýnýfa da IRepositorydeki gibi "Add" metodu ekleyeceðiz ancak burada önemli bir nokta var. DAL katmaný data access yani veri eriþimi ile ilgili olduðu için IRepository içindeki "Add" metodu sorgulamadan ekleme yapacak. Ancak BLL yani iþ katmanýmýzda bu ekleme iþlemini sorgulayacak hatta hata mesajý bile döndürebilir.
			IProductManager
				public interface IProductManager:IManager<Product>
		Concretes:
			BaseManager (implement interface metod virtual olmalý)
				public class BaseManager<T> : IManager<T> where T : BaseEntity
				protected IRepository<T> _irp;
				Constructor açýlmalý: (IRepository<T> _irp; prmtr IRepository<T> irp) bu contstructor sayesinde Dependency Injection yaparýz.
			ProductManager
				public class ProductManager:BaseManager<Product>,IProductManager
				(Constructor)  public ProductManager(IRepository<Product> prp):base(prp)
				override ederiz. (Polymorphism)

Startup->ConfigureService->services.AddAuthentication();
Startup->Configure->add.UseAuthentication();

Þimdi öyle bir þey yapmalýyýz ki IRepository geldiðinde BaseRepository yaratmalý Core projesi. 
KATMAN BAÐIMSIZ DEPENDENCY INJECTION (notlarý var) Hem Autofac olmadan hem de Autofac ile Dependency Injection yapýlacak

BLL içine 
Manuel Dependency Injection (Tetikleme: Startup.cs->ConfigureServices)
	ServiceExtension klasörü açýp içine aþaðýdaki classlarý açýyoruz
		DbContextService -> Veritabaný configurasyon ayarlarýný yapar -> services.AddDbContextService();
		IdentityExtensionService -> Þifreleme, User,Role,Authorize gibi iþlemlerin hazýr olduðu kütüphanedir -> services.AddIdentityService();
		RepManServiceExtension -> Extension metodu ile servisi kullanýr -> services.AddRepAndManServices();
	
Autofac Dependency Injection(Tetikleme: Program.cs->buradaki IHostBuilder'da ConfigureWebHostDefaults'dan önce ekleme yapmamýz lazým-> .ConfigureServices(x=>x.AddAutofac()).UseServiceProviderFactory(new AutofacServiceProviderFactory()).ConfigureContainer<ContainerBuilder>(builder=>
            {
                builder.RegisterModule(new AutofacBusinessModule());        
            }
            ))
	DependencyResolvers klasörü açtýk
		AutofacBusinessModule -> yukarýdaki Manuel Dependency Injection için oluþturduðumuz tüm classlarý burada topluyoruz

	
************************************ MÝMARÝ TAMAMLANDI ****************************************
            
CoreUI

Controller->CategoryController

Models->PageVM->CategoryPageVM

Dal katmanýnda IRepository içine iþimize yarayacak tüm metodlarý yazabiliriz. Implement ettiðin BaseRepositoryde Linq; kütüphanesini ekle. Ayný iþlemi iþ katmaný için BLL içinde IManager içinde metod ekleyip BaseManagerda implement et
				